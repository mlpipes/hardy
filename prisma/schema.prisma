// Hardy Auth - Enhanced Schema with Organizations
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String
  emailVerified   Boolean   @default(false)
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Better Auth required fields
  twoFactorEnabled Boolean  @default(false)
  banned          Boolean   @default(false)
  banReason       String?
  banExpires      DateTime?

  // Healthcare-specific fields
  role            String    @default("user")
  licenseNumber   String?
  npiNumber       String?
  specialties     String[]

  sessions        Session[]
  accounts        Account[]
  twoFactor       TwoFactor?

  // Organization relationships
  memberships     OrganizationMember[]
  invitations     OrganizationInvitation[]

  // Security relationships
  passwordHistory PasswordHistory[]

  @@unique([email])
  @@map("user")
}

model Organization {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  domain           String?  @unique
  logo             String?
  website          String?
  phone            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Healthcare-specific fields
  organizationType String   // hospital, clinic, practice, pharmacy, etc.
  npiNumber        String?  @unique
  licenseNumber    String?

  // Address information
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  zipCode          String?
  country          String   @default("US")

  // Settings
  settings         Json?    // Organization-specific settings
  maxUsers         Int      @default(100)
  isActive         Boolean  @default(true)

  // Relationships
  members          OrganizationMember[]
  invitations      OrganizationInvitation[]
  accounts         Account[]
}

model OrganizationMember {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   // admin, clinician, staff, patient, etc.
  department     String?
  joinedAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model OrganizationInvitation {
  id             String   @id @default(cuid())
  email          String
  organizationId String
  role           String
  invitedBy      String
  token          String   @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User         @relation(fields: [invitedBy], references: [id])

  @@unique([email, organizationId])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Organization relationship (custom extension)
  organizationId        String?

  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization          Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model TwoFactor {
  id          String @id @default(cuid())
  secret      String
  backupCodes String
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String   // Hashed password for security
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passwordHistory")
  @@index([userId, createdAt])
}