// Hardy Auth - Enhanced Schema with Organizations
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Healthcare-specific fields
  licenseNumber String?
  npiNumber     String?
  specialties   String[]

  sessions      Session[]
  accounts      Account[]

  // Organization relationships
  memberships   OrganizationMember[]
  invitations   OrganizationInvitation[]
}

model Organization {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  domain           String?  @unique
  logo             String?
  website          String?
  phone            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Healthcare-specific fields
  organizationType String   // hospital, clinic, practice, pharmacy, etc.
  npiNumber        String?  @unique
  licenseNumber    String?

  // Address information
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  zipCode          String?
  country          String   @default("US")

  // Settings
  settings         Json?    // Organization-specific settings
  maxUsers         Int      @default(100)
  isActive         Boolean  @default(true)

  // Relationships
  members          OrganizationMember[]
  invitations      OrganizationInvitation[]
  accounts         Account[]
}

model OrganizationMember {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   // admin, clinician, staff, patient, etc.
  department     String?
  joinedAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model OrganizationInvitation {
  id             String   @id @default(cuid())
  email          String
  organizationId String
  role           String
  invitedBy      String
  token          String   @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User         @relation(fields: [invitedBy], references: [id])

  @@unique([email, organizationId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  organizationId    String?
  accountId         String
  providerId        String
  accessToken       String? @db.Text
  refreshToken      String? @db.Text
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization      Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}