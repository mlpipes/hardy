# Hardy Auth Service Environment Configuration
# Copy this file to .env.local and fill in your values

# =============================================================================
# CORE CONFIGURATION
# =============================================================================

# Database Configuration (Dedicated PostgreSQL Instance)
DATABASE_URL="postgresql://auth_service:auth_password@localhost:5434/hardy_auth?sslmode=prefer"

# Better Auth Configuration
BETTER_AUTH_SECRET="your-32-character-secret-key-change-in-production"
BETTER_AUTH_URL="http://localhost:3001"

# Application Environment
NODE_ENV="development"
NEXTAUTH_URL="http://localhost:3001"

# =============================================================================
# EMAIL SERVICE CONFIGURATION
# =============================================================================

# AWS SES Configuration (Primary)
AWS_ACCESS_KEY_ID="your-aws-access-key-id"
AWS_SECRET_ACCESS_KEY="your-aws-secret-access-key"
AWS_SES_REGION="us-east-1"
AWS_SES_FROM_EMAIL="noreply@your-domain.com"
NEXT_PUBLIC_APP_URL="http://localhost:3001"

# SMTP Configuration (Fallback) - Configure with your preferred SMTP service
# Option 1: Gmail SMTP (requires app password)
# SMTP_HOST="smtp.gmail.com"
# SMTP_PORT="587"
# SMTP_SECURE="false"
# SMTP_USER="your-gmail@gmail.com"
# SMTP_PASS="your-gmail-app-password"

# Option 2: AWS WorkMail SMTP (uncomment if using)
SMTP_HOST="smtp.mail.us-west-2.awsapps.com"
SMTP_PORT="465"
SMTP_SECURE="true"
SMTP_USER="noreply@your-domain.com"
SMTP_PASS="your-smtp-password"

# Email Templates
SMTP_FROM_NAME="Hardy Auth Service"
SMTP_FROM_EMAIL="noreply@your-domain.com"

# =============================================================================
# OPTIONAL SERVICES
# =============================================================================

# SMS/Twilio Configuration (for SMS 2FA)
TWILIO_ACCOUNT_SID="your-twilio-account-sid"
TWILIO_AUTH_TOKEN="your-twilio-auth-token"
TWILIO_PHONE_NUMBER="+1234567890"

# Redis Configuration (for session storage)
REDIS_URL="redis://default:auth_redis_password@localhost:6381"

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Encryption Keys
ENCRYPTION_KEY="your-32-character-encryption-key-change-in-production"

# Session Configuration
SESSION_TIMEOUT_MINUTES="30"
SESSION_WARNING_MINUTES="5"
SESSION_MAX_AGE="1800"  # 30 minutes in seconds
SESSION_UPDATE_AGE="300"  # 5 minutes in seconds

# Rate Limiting
RATE_LIMIT_WINDOW_MS="900000"  # 15 minutes
RATE_LIMIT_MAX_REQUESTS="100"

# Account Security
MAX_LOGIN_ATTEMPTS="5"
LOCKOUT_DURATION_MINUTES="15"
PASSWORD_MIN_LENGTH="12"

# =============================================================================
# HIPAA COMPLIANCE CONFIGURATION
# =============================================================================

# Audit Logging
AUDIT_LOG_RETENTION_DAYS="2557"  # 7 years for HIPAA compliance
ENABLE_AUDIT_LOGGING="true"

# Data Encryption
ENABLE_FIELD_ENCRYPTION="true"
KEY_ROTATION_DAYS="90"

# =============================================================================
# OAUTH2 CONFIGURATION
# =============================================================================

# OAuth2 Client Configuration
OAUTH2_ISSUER="http://localhost:3001"
OAUTH2_DEFAULT_SCOPE="openid profile email"

# Token Configuration
ACCESS_TOKEN_EXPIRY_MINUTES="60"
REFRESH_TOKEN_EXPIRY_DAYS="30"
ID_TOKEN_EXPIRY_MINUTES="60"

# =============================================================================
# ADMIN DASHBOARD CONFIGURATION
# =============================================================================

# =============================================================================
# ADMIN USER SETUP (Development Only)
# =============================================================================
# ‚ö†Ô∏è  SECURITY WARNING: Only use environment variables in development
# üîí PRODUCTION: Use secrets manager (AWS Secrets Manager, Azure Key Vault, etc.)

# Admin user credentials for initial setup (uncomment and set for first run)
# ADMIN_EMAIL="admin@your-company.com"
# ADMIN_PASSWORD="YourSecurePassword123!@#"
# ADMIN_NAME="System Administrator"

# Admin Interface
ENABLE_ADMIN_REGISTRATION="false"

# Dashboard Features
ENABLE_USER_MANAGEMENT="true"
ENABLE_AUDIT_DASHBOARD="true"
ENABLE_ANALYTICS_DASHBOARD="true"

# =============================================================================
# MONITORING & OBSERVABILITY
# =============================================================================

# Application Monitoring
ENABLE_HEALTH_CHECKS="true"
HEALTH_CHECK_PATH="/api/health"

# Logging Configuration
LOG_LEVEL="info"
ENABLE_STRUCTURED_LOGGING="true"

# Metrics Collection
ENABLE_METRICS="true"
METRICS_PATH="/api/metrics"

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# Development Features
ENABLE_DEBUG_ROUTES="true"
ENABLE_SWAGGER_DOCS="true"
ENABLE_PRISMA_STUDIO="true"

# Testing Configuration
TEST_DATABASE_URL="postgresql://auth_service:auth_password@localhost:5434/hardy_auth_test"

# =============================================================================
# TENANT CONFIGURATION
# =============================================================================

# Multi-tenancy Settings
ENABLE_MULTI_TENANCY="true"
DEFAULT_TENANT_ID="default"
TENANT_ISOLATION_STRATEGY="RLS"  # Row Level Security

# =============================================================================
# PRODUCTION SECRETS MANAGEMENT
# =============================================================================
# üîí In production, use a secrets manager instead of environment variables
# This provides better security, audit trails, and rotation capabilities

# AWS Secrets Manager (Recommended for AWS deployments)
# AWS_SECRETS_MANAGER_SECRET_ID="prod/hardy-auth/credentials"
# AWS_SECRETS_MANAGER_REGION="us-east-1"

# Azure Key Vault (For Azure deployments)
# AZURE_KEY_VAULT_NAME="hardy-auth-keyvault"
# AZURE_TENANT_ID="your-tenant-id"
# AZURE_CLIENT_ID="your-client-id"
# AZURE_CLIENT_SECRET="your-client-secret"

# HashiCorp Vault (For on-premise or multi-cloud)
# VAULT_ENDPOINT="https://vault.your-company.com"
# VAULT_TOKEN="your-vault-token"
# VAULT_SECRET_PATH="secret/hardy-auth"

# Google Secret Manager (For GCP deployments)
# GOOGLE_CLOUD_PROJECT_ID="your-project-id"
# GOOGLE_APPLICATION_CREDENTIALS="/path/to/service-account.json"

# Kubernetes Secrets (For container deployments)
# Mount secrets as volumes or environment variables from K8s secrets

# =============================================================================
# SECRETS MANAGEMENT INTEGRATION NOTES
# =============================================================================
#
# Our code is designed to be portable across different secrets managers:
#
# 1. Environment Variables (Development)
#    - Simple .env.local files
#    - Good for local development only
#
# 2. AWS Secrets Manager
#    - Automatic rotation support
#    - Integration with AWS IAM
#    - Audit logging built-in
#
# 3. Azure Key Vault
#    - Integrated with Azure AD
#    - Hardware security module backing
#    - Role-based access control
#
# 4. HashiCorp Vault
#    - Dynamic secrets generation
#    - Cross-platform support
#    - Advanced policy management
#
# 5. Google Secret Manager
#    - Automatic encryption at rest
#    - IAM integration
#    - Audit logging
#
# To integrate any secrets manager:
# 1. Install the appropriate SDK
# 2. Create a secrets service in src/lib/secrets/
# 3. Update environment variable loading
# 4. Test secret retrieval and caching
#
# Example usage:
#   const dbUrl = await secretsManager.getSecret('DATABASE_URL');
#   const apiKey = await secretsManager.getSecret('EXTERNAL_API_KEY');