# Hardy Auth Service Docker Compose
# HIPAA, SOC 2 Type II, and HITRUST Ready Authentication Infrastructure

version: '3.8'

services:
  # Hardy Authentication Service
  auth-service:
    build: .
    container_name: hardy-auth-service
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://auth_service:auth_password@auth-db:5432/hardy_auth
      - BETTER_AUTH_SECRET=your-32-character-secret-key-here-change-in-production
      - BETTER_AUTH_URL=http://localhost:3001
      - REDIS_URL=redis://auth-redis:6379
      - SMTP_HOST=smtp.mail.us-west-2.awsapps.com
      - SMTP_PORT=465
      - SMTP_USER=support@mlpipes.ai
      - SMTP_PASS=${SMTP_PASS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    depends_on:
      auth-db:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Dedicated PostgreSQL Database for Authentication
  auth-db:
    image: postgres:15-alpine
    container_name: hardy-auth-db
    ports:
      - "5434:5432"  # Hardy Auth dedicated database port
    environment:
      - POSTGRES_DB=hardy_auth
      - POSTGRES_USER=auth_service
      - POSTGRES_PASSWORD=auth_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_service -d hardy_auth"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for Session Storage (Optional but Recommended)
  auth-redis:
    image: redis:7-alpine
    container_name: hardy-auth-redis
    ports:
      - "6381:6379"  # Hardy Auth Redis port
    volumes:
      - auth_redis_data:/data
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes --requirepass auth_redis_password

  # NGINX Reverse Proxy with SSL (Production)
  auth-nginx:
    image: nginx:alpine
    container_name: hardy-auth-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
    networks:
      - auth-network
    restart: unless-stopped
    profiles:
      - production

  # Database Administration (Development)
  auth-adminer:
    image: adminer:latest
    container_name: hardy-auth-adminer
    ports:
      - "8081:8080"  # Hardy Auth Adminer port
    environment:
      - ADMINER_DEFAULT_SERVER=auth-db
    depends_on:
      - auth-db
    networks:
      - auth-network
    restart: unless-stopped
    profiles:
      - development

volumes:
  auth_db_data:
    driver: local
    name: hardy_auth_db_data
  auth_redis_data:
    driver: local
    name: hardy_auth_redis_data

networks:
  auth-network:
    driver: bridge
    name: hardy_auth_network

# Health check script
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s